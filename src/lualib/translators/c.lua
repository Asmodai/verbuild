-- ============================================================================
-- {{{ Module code:

--
-- Dispatch table for version fields.
--
local dispatch = {
   ["MAJOR"]     = function(v) version.major = tonumber(v) end,
   ["MINOR"]     = function(v) version.minor = tonumber(v) end,
   ["BUILD"]     = function(v) version.build = tonumber(v) end,
   ["PATCH"]     = function(v) version.patch = tonumber(v) end,
   ["BASE_YEAR"] = function(v) version.year  = tonumber(v) end
}

function write_header()
   return [[/*
 * ----------------------------------------------------"
 * Automatically generated by Verbuild ]] .. verbuild_version .. [[.
 * Do not edit by hand.
 * ----------------------------------------------------
 */

#pragma once
#ifndef __VersionInfo_Header__
#define __VersionInfo_Header__

]]
end

function write_footer()
   return [[#endif // !__VersionInfo_Header__]]
end

--
-- Attempt to match by C structure.
--
function match_struct()
   local res = match(
      buffer,
      "(?:VersionNumber\\s*=\\s*[{]\\s*)(\\d+)(?:[,]\\s+)(\\d+)(?:[,]\\s+)(\\d+)(?:[,]\\s+)(\\d+)(?:[,]\\s+)(\\d+)(?:\\s*[}])",
      {1, 2, 3, 4, 5}
   )

   debug("Trying to match struct...")

   if (res:size() == 5 and tonumber(res[1]) ~= nil) then
      dispatch["BASE_YEAR"](res[1])
      dispatch["MAJOR"](res[2])
      dispatch["MINOR"](res[3])
      dispatch["BUILD"](res[4])
      dispatch["PATCH"](res[5])
      
      return true
   end
   
   return false
end

--
-- Attempt to match by C preprocessor definitions.
--
function match_defines()
   local res = match(
      buffer,
      "(?:VERSION[_])(\\w+)(?:\\s+)(\\d+)",
      {1, 2}
   )

   debug("Trying to match defines...")
   
   if (res:size() == 10 and tonumber(res[2]) ~= nil) then
      local key, val
      
      for i = 1, #res, 2 do
         key = res[i]
         val = res[i + 1]
         
         if type(dispatch[key]) == "function" then
            dispatch[key](val)
         end
      end
      
      return true
   end
   
   return false
end


-- }}}
-- ============================================================================

-- ============================================================================
-- {{{ Entry points:

--
-- Attempt a parse.
--
function parse()
   local r = false

   debug("parse() entered")

   -- Try to match by structure first.
   r = match_struct()

   if r == false then
      -- That failed, let's try defines

      r = match_defines()
   end

   -- If both failed, well, who cares.
   success = r

   debug("parse() exited")
end


function build()
   debug("build() entered")

   return write_header() .. write_footer()
end

function info()
   debug("Setting module info")
   modinfo.transform = "c"
   modinfo.name      = "C/C++"
   modinfo.author    = "Paul Ward"
end

debug("Script loaded")

diebitch()

-- }}}
-- ============================================================================

-- EOF
